{"name":"Wereadscan","tagline":"扫描“微信读书”已购图书并下载本地PDF的爬虫","body":"# WeReadScan\r\n\r\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/c00b1cc6fa3245668bbda64584479f9d)](https://app.codacy.com/manual/Algebra-FUN/WeReadScan?utm_source=github.com&utm_medium=referral&utm_content=Algebra-FUN/WeReadScan&utm_campaign=Badge_Grade_Dashboard) ![GitHub last commit](https://img.shields.io/github/last-commit/Algebra-FUN/WeReadScan) ![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/Algebra-FUN/WeReadScan) ![GitHub top language](https://img.shields.io/github/languages/top/Algebra-FUN/WeReadScan) [![pip](https://img.shields.io/badge/pip-0.6.7-orange)](https://pypi.org/project/WeReadScan/)\r\n\r\n## About\r\n\r\n一个用于的将`微信读书`上的图书扫描转换本地PDF的爬虫库.\r\n\r\n### 谈谈为何而开发\r\n\r\n不得不说，“微信读书”是一个很好的平台。但是美中不足很明显，用户购买了图书资源，但是只能在“微信读书”的Application中阅读或者做一些文字批注╮(╯▽╰)╭，这些功能相较于购买的纸质书籍显然是不足的。比如，作者就习惯于用iPad的相关notebook类app做笔记，而“微信读书”并没有适配pencil做handwriting笔记的功能。\r\n\r\n因此，既然“微信读书”没有提供，那只好自己解决了。于是，经过2天的开发，终于有了这个爬虫脚本，也可以开心地做手写笔记了o(_￣▽￣_)ブ\r\n\r\n## Get started\r\n\r\n```shell\r\npip install WeReadScan\r\n```\r\n\r\n> 本项目需要使用selenium，需要对selenium具备基础的了解\r\n\r\n### Demo\r\n\r\n话不多说，直接上代码\r\n\r\n```python\r\nfrom selenium.webdriver import Chrome, ChromeOptions\r\nfrom WeReadScan import WeRead\r\n\r\n# 重要！为webdriver设置headless\r\nchrome_options = ChromeOptions()\r\nchrome_options.add_argument('--headless')\r\n\r\n# 启动webdriver(--headless)\r\nheadless_driver = Chrome(chrome_options=chrome_options)\r\n\r\nwith WeRead(headless_driver) as weread:\r\n    # 重要！登陆\r\n    weread.login()\r\n    # 爬去指定url对应的图书资源并保存到当前文件夹\r\n    weread.scan2pdf('https://weread.qq.com/web/reader/2c632ef071a486a92c60226')\r\n```\r\n\r\n扫描结果样例：\r\n\r\n![](https://github.com/Algebra-FUN/WeReadScan/blob/master/example/sample.png?raw=true)\r\n\r\n几点说明：\r\n\r\n1.  webdriver 需要 `无头(headless)` 模式启动\r\n2.  只有登陆后，才能扫描完整的图书资源；若不登陆，也可以扫描部分无需解锁的部分\r\n\r\n## API Reference\r\n\r\n### WeRead\r\n\r\nWeReadScan.WeRead(headless_driver)\r\n\r\n`微信读书`网页代理，用于图书扫描\r\n\r\n#### Args\r\n\r\n-   headless_driver:\t设置了headless的Webdriver示例\r\n\r\n#### Returns\r\n\r\n-   WeReadInstance\r\n\r\n#### Usage\r\n\r\n```python\r\nchrome_options = ChromeOptions()\r\nchrome_options.add_argument('--headless')\r\nheadless_driver = Chrome(chrome_options=chrome_options)\r\nweread = WeRead(headless_driver)\r\n```\r\n\r\n### Login\r\n\r\nWeReadScan.WeRead.login(wait_turns=15)\r\n\r\n展示二维码以登陆微信读书\r\n\r\n#### Args\r\n\r\n-   wait_turns:\t登陆二维码等待扫描的等待轮数\r\n\r\n#### Usage\r\n\r\n```python\r\nweread.login()\r\n```\r\n\r\n### Scan2pdf\r\n\r\nWeReadScan.WeRead.scan2pdf(self, book_url, save_at='.', binary_threshold=95, quality=90, show_output=True)\r\n\r\n扫面`微信读书`的书籍转换为PDF并保存本地\r\n\r\n#### Args\r\n\r\n| 参数名              | 类型   | 默认值  | 描述                    |\r\n| ---------------- | ---- | ---- | --------------------- |\r\n| book_url         | str  | 必填   | 扫描目标书籍的URL            |\r\n| save_at          | str  | '.'  | 保存地址                  |\r\n| binary_threshold | int  | 95   | 二值化处理的阈值              |\r\n| quality          | int  | 95   | 扫描PDF的质量              |\r\n| show_output      | bool | True | 是否在该方法函数结束时展示生成的PDF文件 |\r\n\r\n#### Usage\r\n\r\n```python\r\nweread.scan2pdf('https://weread.qq.com/web/reader/a57325c05c8ed3a57224187kc81322c012c81e728d9d180')\r\n```\r\n\r\n## Disclaimer\r\n\r\n-   本脚本仅限用于**已购**图书的爬取，用于私人学习目的，禁止用于商业目的和网上资源扩散，尊重微信读书方面的利益\r\n-   若User使用该脚本用于不当的目的，责任由使用者承担，作者概不负责\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}